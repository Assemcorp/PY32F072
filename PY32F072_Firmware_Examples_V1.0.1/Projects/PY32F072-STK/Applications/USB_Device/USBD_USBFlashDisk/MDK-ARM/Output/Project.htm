<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Oct 10 10:41:42 2025
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; USBD_IRQHandler &rArr; handle_ep0 &rArr; usbd_event_ep_out_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC_COMP_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[24]">CAN_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from py32f072_it.o(i.HardFault_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[e]">LCD_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from py32f072_it.o(i.NMI_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from py32f072_it.o(i.PendSV_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from py32f072_it.o(i.SVC_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from py32f072_it.o(i.SysTick_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_py32f072.o(i.SystemInit) referenced from startup_py32f072xx.o(.text)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[17]">TIM6_LPTIM1_DAC_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[23]">USART3_4_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from py32f072_it.o(i.USB_IRQHandler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_py32f072xx.o(.text)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2c]">mass_storage_bulk_in</a> from usbd_msc.o(i.mass_storage_bulk_in) referenced from usbd_msc.o(i.usbd_msc_init_intf)
 <LI><a href="#[2b]">mass_storage_bulk_out</a> from usbd_msc.o(i.mass_storage_bulk_out) referenced from usbd_msc.o(i.usbd_msc_init_intf)
 <LI><a href="#[29]">msc_storage_class_interface_request_handler</a> from usbd_msc.o(i.msc_storage_class_interface_request_handler) referenced from usbd_msc.o(i.usbd_msc_init_intf)
 <LI><a href="#[2a]">msc_storage_notify_handler</a> from usbd_msc.o(i.msc_storage_notify_handler) referenced from usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[32]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[99]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_LPTIM1_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_requestSense
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readFormatCapacity
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readCapacity10
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense6
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense10
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_inquiry
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_requestSense
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense10
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_inquiry
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>APP_ErrorHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.APP_ErrorHandler))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[3a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, py32f072_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[3c]"></a>HAL_FLASH_Erase</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, py32f072_hal_flash.o(i.HAL_FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_write
</UL>

<P><STRONG><a name="[87]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, py32f072_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_write
</UL>

<P><STRONG><a name="[40]"></a>HAL_FLASH_Program</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, py32f072_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Page
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_write
</UL>

<P><STRONG><a name="[86]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, py32f072_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_write
</UL>

<P><STRONG><a name="[3b]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, py32f072_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[64]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f072_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[42]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, py32f072_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>HAL_InitTick</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, py32f072_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[44]"></a>HAL_MspInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, py32f072_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[47]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, py32f072_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[37]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, py32f072_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[49]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, py32f072_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[35]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1566 bytes, Stack size 48 bytes, py32f072_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHSIFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[46]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, py32f072_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f072_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f072_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f072_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f072_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, py32f072_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_py32f072.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>USBD_IRQHandler</STRONG> (Thumb, 680 bytes, Stack size 32 bytes, usb_dc_py32.o(i.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USBD_IRQHandler &rArr; handle_ep0 &rArr; usbd_event_ep_out_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_write_packet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_set_active_ep
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_read_packet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_get_active_ep
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_suspend_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_resume_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, py32f072_it.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USB_IRQHandler &rArr; USBD_IRQHandler &rArr; handle_ep0 &rArr; usbd_event_ep_out_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, py32f072_hal_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_interface_req_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = main &rArr; APP_SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USBInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2c]"></a>mass_storage_bulk_in</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usbd_msc.o(i.mass_storage_bulk_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mass_storage_bulk_in &rArr; usbd_msc_send_csw &rArr; usbd_ep_start_write &rArr; pyusb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P><STRONG><a name="[2b]"></a>mass_storage_bulk_out</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_msc.o(i.mass_storage_bulk_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mass_storage_bulk_out &rArr; SCSI_processWrite &rArr; usbd_msc_sector_write &rArr; HAL_FLASH_Program &rArr; FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_bot_abort
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P><STRONG><a name="[39]"></a>msc_ram_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_msc_flash.o(i.msc_ram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msc_ram_init &rArr; usbd_msc_init_intf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_desc_register
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_add_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USBInit
</UL>

<P><STRONG><a name="[2a]"></a>msc_storage_notify_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_msc.o(i.msc_storage_notify_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msc_storage_notify_handler &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_reset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P><STRONG><a name="[78]"></a>usb_dc_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_dc_py32.o(i.usb_dc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_dc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_set_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
</UL>

<P><STRONG><a name="[79]"></a>usb_dc_low_level_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_dc_py32.o(i.usb_dc_low_level_init))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[84]"></a>usbd_add_endpoint</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_add_endpoint))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
</UL>

<P><STRONG><a name="[75]"></a>usbd_add_interface</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_add_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_add_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_ram_init
</UL>

<P><STRONG><a name="[95]"></a>usbd_configure_done_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_msc_flash.o(i.usbd_configure_done_callback))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>

<P><STRONG><a name="[73]"></a>usbd_desc_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_desc_register))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_ram_init
</UL>

<P><STRONG><a name="[7f]"></a>usbd_ep0_reset_zlp_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dc_py32.o(i.usbd_ep0_reset_zlp_flag))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>

<P><STRONG><a name="[81]"></a>usbd_ep0_set_zlp_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dc_py32.o(i.usbd_ep0_set_zlp_flag))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[7a]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usb_dc_py32.o(i.usbd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_set_active_ep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
</UL>

<P><STRONG><a name="[89]"></a>usbd_ep_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_dc_py32.o(i.usbd_ep_close))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_endpoint
</UL>

<P><STRONG><a name="[7b]"></a>usbd_ep_is_stalled</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usb_dc_py32.o(i.usbd_ep_is_stalled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_is_stalled
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_set_active_ep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
</UL>

<P><STRONG><a name="[7c]"></a>usbd_ep_open</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, usb_dc_py32.o(i.usbd_ep_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_set_active_ep
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_get_fifo_size
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_endpoint
</UL>

<P><STRONG><a name="[7e]"></a>usbd_ep_set_stall</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_dc_py32.o(i.usbd_ep_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_set_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_set_active_ep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_bot_abort
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
</UL>

<P><STRONG><a name="[63]"></a>usbd_ep_start_read</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, usb_dc_py32.o(i.usbd_ep_start_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_set_active_ep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_notify_handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_in
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_bot_abort
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write12
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write10
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[60]"></a>usbd_ep_start_write</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, usb_dc_py32.o(i.usbd_ep_start_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbd_ep_start_write &rArr; pyusb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep0_reset_zlp_flag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_write_packet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_set_active_ep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_info
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[71]"></a>usbd_event_ep0_setup_complete_handler</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_event_ep0_setup_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep0_set_zlp_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>

<P><STRONG><a name="[6c]"></a>usbd_event_ep_in_complete_handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_event_ep_in_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_event_ep_in_complete_handler &rArr; usbd_ep_start_write &rArr; pyusb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>

<P><STRONG><a name="[6f]"></a>usbd_event_ep_out_complete_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_event_ep_out_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usbd_event_ep_out_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>

<P><STRONG><a name="[67]"></a>usbd_event_reset_handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_event_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_event_reset_handler &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>usbd_event_resume_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_event_resume_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_event_resume_handler &rArr; usbd_class_event_notify_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>usbd_event_suspend_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_event_suspend_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_event_suspend_handler &rArr; usbd_class_event_notify_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>usbd_initialize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_initialize &rArr; usb_dc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_ram_init
</UL>

<P><STRONG><a name="[85]"></a>usbd_msc_get_cap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_msc_flash.o(i.usbd_msc_get_cap))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
</UL>

<P><STRONG><a name="[74]"></a>usbd_msc_init_intf</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usbd_msc.o(i.usbd_msc_init_intf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_msc_init_intf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_get_cap
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_add_endpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_ram_init
</UL>

<P><STRONG><a name="[5f]"></a>usbd_msc_sector_read</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usbd_msc_flash.o(i.usbd_msc_sector_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_msc_sector_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
</UL>

<P><STRONG><a name="[62]"></a>usbd_msc_sector_write</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, usbd_msc_flash.o(i.usbd_msc_sector_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usbd_msc_sector_write &rArr; HAL_FLASH_Program &rArr; FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
</UL>

<P><STRONG><a name="[82]"></a>usbd_set_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_dc_py32.o(i.usbd_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[33]"></a>APP_SystemClockConfig</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, main.o(i.APP_SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = APP_SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ErrorHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>APP_USBInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, main.o(i.APP_USBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_USBInit &rArr; msc_ram_init &rArr; usbd_msc_init_intf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_ram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, py32f072_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[4b]"></a>RCC_GetHSIFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f072_hal_rcc.o(i.RCC_GetHSIFreq))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[3d]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, py32f072_hal_flash.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[3e]"></a>FLASH_PageErase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f072_hal_flash.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[41]"></a>FLASH_Program_Page</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, py32f072_hal_flash.o(i.FLASH_Program_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_Program_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[3f]"></a>FLASH_SectorErase</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f072_hal_flash.o(i.FLASH_SectorErase))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[96]"></a>is_device_configured</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.is_device_configured))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_interface_req_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
</UL>

<P><STRONG><a name="[83]"></a>usbd_class_event_notify_handler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_class_event_notify_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_class_event_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_suspend_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_resume_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_interface
</UL>

<P><STRONG><a name="[8f]"></a>usbd_class_request_handler</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_class_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_class_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[94]"></a>usbd_get_descriptor</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, usbd_core.o(i.usbd_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_get_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>

<P><STRONG><a name="[8e]"></a>usbd_print_setup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_print_setup))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[88]"></a>usbd_reset_endpoint</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_reset_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_reset_endpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_close
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_interface
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
</UL>

<P><STRONG><a name="[8a]"></a>usbd_set_configuration</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usbd_set_configuration &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_endpoint
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_endpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>

<P><STRONG><a name="[8b]"></a>usbd_set_endpoint</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_set_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_interface
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
</UL>

<P><STRONG><a name="[8c]"></a>usbd_set_interface</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, usbd_core.o(i.usbd_set_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_endpoint
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_endpoint
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_interface_req_handler
</UL>

<P><STRONG><a name="[80]"></a>usbd_setup_request_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_setup_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request_handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_print_setup
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[8d]"></a>usbd_standard_request_handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_standard_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_interface_req_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[91]"></a>usbd_std_device_req_handler</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_std_device_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_std_device_req_handler &rArr; usbd_set_configuration &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_configure_done_callback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request_handler
</UL>

<P><STRONG><a name="[93]"></a>usbd_std_endpoint_req_handler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_std_endpoint_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_std_endpoint_req_handler &rArr; usbd_ep_is_stalled
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_is_stalled
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_device_configured
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request_handler
</UL>

<P><STRONG><a name="[92]"></a>usbd_std_interface_req_handler</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_std_interface_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_interface
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_device_configured
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request_handler
</UL>

<P><STRONG><a name="[90]"></a>usbd_vendor_request_handler</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_vendor_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_vendor_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[6b]"></a>handle_ep0</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, usb_dc_py32.o(i.handle_ep0))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = handle_ep0 &rArr; usbd_event_ep_out_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; pyusb_get_fifo_size
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pyusb_read_packet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>pyusb_get_active_ep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_dc_py32.o(i.pyusb_get_active_ep))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_is_stalled
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
</UL>

<P><STRONG><a name="[7d]"></a>pyusb_get_fifo_size</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_dc_py32.o(i.pyusb_get_fifo_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pyusb_get_fifo_size
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
</UL>

<P><STRONG><a name="[6e]"></a>pyusb_read_packet</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, usb_dc_py32.o(i.pyusb_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pyusb_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>

<P><STRONG><a name="[6a]"></a>pyusb_set_active_ep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_dc_py32.o(i.pyusb_set_active_ep))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_is_stalled
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[6d]"></a>pyusb_write_packet</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, usb_dc_py32.o(i.pyusb_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pyusb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>

<P><STRONG><a name="[4c]"></a>SCSI_CBWDecode</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, usbd_msc.o(i.SCSI_CBWDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCSI_CBWDecode &rArr; SCSI_inquiry
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_info
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write12
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write10
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_testUnitReady
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_startStopUnit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_requestSense
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readFormatCapacity
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readCapacity10
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read12
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read10
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_preventAllowMediaRemoval
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense6
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense10
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_inquiry
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
</UL>

<P><STRONG><a name="[4d]"></a>SCSI_SetSenseData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_msc.o(i.SCSI_SetSenseData))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write12
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write10
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_testUnitReady
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_startStopUnit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_requestSense
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readFormatCapacity
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readCapacity10
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read12
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read10
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_preventAllowMediaRemoval
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense6
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense10
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_inquiry
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[50]"></a>SCSI_inquiry</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, usbd_msc.o(i.SCSI_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SCSI_inquiry
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[54]"></a>SCSI_modeSense10</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, usbd_msc.o(i.SCSI_modeSense10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCSI_modeSense10
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[53]"></a>SCSI_modeSense6</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usbd_msc.o(i.SCSI_modeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_modeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[52]"></a>SCSI_preventAllowMediaRemoval</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_preventAllowMediaRemoval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_preventAllowMediaRemoval
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[5e]"></a>SCSI_processRead</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, usbd_msc.o(i.SCSI_processRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SCSI_processRead &rArr; usbd_ep_start_write &rArr; pyusb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_read
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_in
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read12
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read10
</UL>

<P><STRONG><a name="[61]"></a>SCSI_processWrite</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_processWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SCSI_processWrite &rArr; usbd_msc_sector_write &rArr; HAL_FLASH_Program &rArr; FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
</UL>

<P><STRONG><a name="[57]"></a>SCSI_read10</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_read10 &rArr; SCSI_processRead &rArr; usbd_ep_start_write &rArr; pyusb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[58]"></a>SCSI_read12</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_read12))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_read12 &rArr; SCSI_processRead &rArr; usbd_ep_start_write &rArr; pyusb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[56]"></a>SCSI_readCapacity10</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usbd_msc.o(i.SCSI_readCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_readCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[55]"></a>SCSI_readFormatCapacity</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd_msc.o(i.SCSI_readFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_readFormatCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[4f]"></a>SCSI_requestSense</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, usbd_msc.o(i.SCSI_requestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_requestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[51]"></a>SCSI_startStopUnit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_startStopUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_startStopUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[4e]"></a>SCSI_testUnitReady</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_testUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_testUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[59]"></a>SCSI_write10</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_write10 &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[5a]"></a>SCSI_write12</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_write12))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_write12 &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[29]"></a>msc_storage_class_interface_request_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_msc.o(i.msc_storage_class_interface_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msc_storage_class_interface_request_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P><STRONG><a name="[72]"></a>usbd_msc_bot_abort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_msc.o(i.usbd_msc_bot_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_msc_bot_abort &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
</UL>

<P><STRONG><a name="[77]"></a>usbd_msc_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_msc.o(i.usbd_msc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_notify_handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_class_interface_request_handler
</UL>

<P><STRONG><a name="[5c]"></a>usbd_msc_send_csw</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_msc.o(i.usbd_msc_send_csw))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_msc_send_csw &rArr; usbd_ep_start_write &rArr; pyusb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_in
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[5b]"></a>usbd_msc_send_info</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_msc.o(i.usbd_msc_send_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_msc_send_info &rArr; usbd_ep_start_write &rArr; pyusb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
